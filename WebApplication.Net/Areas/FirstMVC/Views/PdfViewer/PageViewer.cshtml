@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>PageViewer</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.css" />
    <style>
        body {
            background-color: #808080;
            margin: 0;
            padding: 0;
        }
    </style>
    <link rel="stylesheet" href="~/lib/pdfjs-dist/web/pdf_viewer.css">
</head>

<body>
    <div align="center">
        <button id="prev" class="btn btn-xs btn-default">Previous</button>
        <button id="next" class="btn btn-xs btn-default">Next</button>
        &nbsp; &nbsp;
        <span>Page: <span id="page_num"></span> / <span id="page_count"></span></span>
    </div>

    <div align="center">
        <canvas id="the-canvas" class="pdfViewer"></canvas>
    </div>

    <script src="~/lib/pdfjs-dist/web/compatibility.js"></script>
    <script src="~/lib/pdfjs-dist/build/pdf.js"></script>
    
    <script id="script">
        var url = '@Url.Action("GetPdf")';
      
        var pdfDoc = null,
            pageNum = 1,
            pageRendering = false,
            pageNumPending = null,
            scale = 1.0,
            canvas = document.getElementById('the-canvas'),
            ctx = canvas.getContext('2d');
      
        /**
        * Get page info from document, resize canvas accordingly, and render page.
        * param num Page number.
        */
        function renderPage(num) {
            pageRendering = true;
            // Using promise to fetch the page
            pdfDoc.getPage(num).then(function(page) {
                var viewport = page.getViewport(scale);
                canvas.height = viewport.height;
                canvas.width = viewport.width;
          
                // Render PDF page into canvas context
                var renderContext = {
                    canvasContext: ctx,
                    viewport: viewport
                };
                var renderTask = page.render(renderContext);
          
                // Wait for rendering to finish
                renderTask.promise.then(function () {
                    pageRendering = false;
                    if (pageNumPending !== null) {
                        // New page rendering is pending
                        renderPage(pageNumPending);
                        pageNumPending = null;
                    }
                });
            });
        
            // Update page counters
            document.getElementById('page_num').textContent = pageNum;
        }
      
        /**
        * If another page rendering in progress, waits until the rendering is
        * finised. Otherwise, executes rendering immediately.
        */
        function queueRenderPage(num) {
            if (pageRendering) {
                pageNumPending = num;
            } else {
                renderPage(num);
            }
        }
      
        /**
        * Displays previous page.
        */
        function onPrevPage() {
            if (pageNum <= 1) {
                return;
            }
            pageNum--;
            queueRenderPage(pageNum);
        }
        document.getElementById('prev').addEventListener('click', onPrevPage);
      
        /**
        * Displays next page.
        */
        function onNextPage() {
            if (pageNum >= pdfDoc.numPages) {
                return;
            }
            pageNum++;
            queueRenderPage(pageNum);
        }
        document.getElementById('next').addEventListener('click', onNextPage);
      
        /**
        * Asynchronously downloads PDF.
        */
        PDFJS.getDocument(url).then(function (pdfDoc_) {
            pdfDoc = pdfDoc_;
            document.getElementById('page_count').textContent = pdfDoc.numPages;
        
            // Initial/first page rendering
            renderPage(pageNum);
        });
    </script>
</body>
</html>
